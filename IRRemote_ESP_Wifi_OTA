
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

#define IR_LED_PIN 2

const char* ssid = "Sami";
const char* password = "bhulegesi";

const char* hotspotSSID = "TechnoLights";
const int maxConnectionAttempts = 15;  // Maximum attempts to connect to WiFi

ESP8266WebServer server(80);
IRsend irsend(IR_LED_PIN);

const uint32_t red = 0x1FEE01F;
const uint32_t toggle = 0x1FE48B7;
const uint32_t blue = 0x1FE906F;
const uint32_t green = 0x1FE10EF;
const uint32_t yellow = 0x1FE50AF;
const uint32_t brightnessUp = 0x1FE58A7;
const uint32_t brightnessDown = 0x1FE7887;
const uint32_t warm = 0x1FE20DF;
const uint32_t white = 0x1FE609F;

const uint32_t colors[] = { red, blue, white };  // Define colors array globally


bool isStrobeOn = false;
bool isColorStrobe = false;
bool isOTAEnabled = true;
bool ledState = HIGH;

unsigned long previousMillis = 0;
unsigned long currentMillis = 0;
unsigned long previousStrobeTime = 0;
double interval = 0;
float bpm = 124;

void setup() {
  Serial.begin(115200);
  irsend.begin();
  pinMode(LED_BUILTIN, OUTPUT);
  connectToWiFi();
  setupOTA();
  setupServer();
}

void loop() {


  if (isOTAEnabled) {
    ArduinoOTA.handle();
  }
  server.handleClient();
  if (isStrobeOn) {
    handleStrobe();
  }
  if (isColorStrobe) {
    handleColorStrobe();
  }
  WifiAP1();
}

void WifiAP1() {
  currentMillis = millis();

  if (WiFi.getMode() == 3) {

    if (WiFi.softAPgetStationNum() > 0) {
      digitalWrite(LED_BUILTIN, LOW);  // Turn on LED when a device is connected


      return;  // Exit the function if a device is connected
    }

    if (currentMillis - previousMillis >= 80) {
      previousMillis = currentMillis;
      digitalWrite(LED_BUILTIN, ledState);
      ledState = !ledState;

      Serial.println("No Device connected ");
    }
  }
}

void connectToWiFi() {
  digitalWrite(LED_BUILTIN, HIGH);
  Serial.println(" connectToWiFi() led low");
  int attemptCount = 0;
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED && attemptCount < maxConnectionAttempts) {
    digitalWrite(LED_BUILTIN, HIGH);
    delay(400);
    Serial.print(".");
    attemptCount++;
    digitalWrite(LED_BUILTIN, LOW);
    delay(400);
  }

  if (WiFi.status() == WL_CONNECTED) {

    if (WiFi.getMode() == 3) {
      isOTAEnabled = true;
      // Connection successful, redirect to the new IP address
      IPAddress newIP = WiFi.localIP();
      String redirectURL = "http://" + newIP.toString() + "/";
      String htmlResponse = "Connected to WiFi. <a href='" + redirectURL + "'>Click here</a> to enter the portal.";
      server.send(200, "text/html", htmlResponse);
      delay(7000);

      WiFi.softAPdisconnect(true);  // Disconnect and stop the hotspot
      Serial.println("Stopped WiFi hotspot");
    }
    digitalWrite(LED_BUILTIN, LOW);
    Serial.println("led h");
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
  } else {

    if (WiFi.getMode() == 3) {
      server.send(401, "text/html", "Failed to connect to WiFi. Wrong password entered. <a href='http://192.168.1.1'>Click here</a> to try again.");



    } else {
      Serial.println("");
      Serial.println("Failed to connect to WiFi. Starting hotspot...");
      isOTAEnabled = false;
      // Start hotspot
      WiFi.softAP(hotspotSSID, password);

      // Optional: Configure the IP address of the hotspot
      IPAddress apIP(192, 168, 1, 1);
      WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));

      Serial.println("Hotspot started");
      Serial.print("IP address of the hotspot: ");
      Serial.println(WiFi.softAPIP());
    }
  }
}


void setupOTA() {
  if (isOTAEnabled) {
    ArduinoOTA.begin();
    Serial.println("OTA initialized");
  } else {
    Serial.println("OTA disabled");
  }
}

void setupServer() {
  server.on("/", handleRoot);
  server.on("/ir", handleIR);
  server.on("/toggle-strobe", handleToggleStrobe);
  server.on("/toggle-colorstrobe", handleToggleColorStrobe);
  server.on("/toggle-ota", handleToggleOTA);
  server.on("/double-bpm", handleDoubleBPM);
  server.on("/half-bpm", handleHalfBPM);
  server.on("/set-bpm", handleSetBPM);
  server.on("/connect", handleConnect);
  server.begin();
}

void handleRoot() {
  String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'><title>Light Controller</title><style>body{background-color:#222;color:#fff;font-family:Arial,sans-serif;padding:20px;}button{background-color:#444;color:#fff;border:none;padding:10px 20px;margin:5px;cursor:pointer;}input[type='number']{padding:10px;margin:5px;border-radius:5px;box-sizing:border-box;}@media only screen and (max-width:600px){button{width:100%;}input{width:100%;}}.strobing { animation: strobe-animation 0.5s infinite alternate;}@keyframes strobe-animation {from {background-color: #444;}to {background-color: #fff;}}</style></head><body><h2 style='text-align:center;font-family:Bebas Neue;'>Techno Lights</h2><div style='text-align:center;'>";
  if (WiFi.getMode() == 3) {
    // If in AP mode, display form to enter new WiFi credentials
    html += "<form method='get' action='/connect'><input type='text' name='ssid' placeholder='New WiFi SSID'><br>";
    html += "<input type='password' name='password' placeholder='New WiFi Password'><br>";
    html += "<button type='submit'>Connect to WiFi</button></form>";
  } else {
    String light[] = { "Power", "Brightness +", "Brightness -" };
    for (int i = 0; i < sizeof(light) / sizeof(light[0]); i++) {
      html += "<button onclick='sendIR(\"" + light[i] + "\")'>" + light[i] + "</button>";
    }

    html += "</div><div style='text-align:center;'>";
    String colors[] = { "Red", "Blue", "Green", "Yellow", "Warm", "White" };
    String textColors[] = { "#EF5350", "#2196F3", "#4CAF50", "#FFEB3B", "#FF9800", "#FFFFFF" };  // Hex codes for text colors
    for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++) {
      html += "<button onclick='sendIR(\"" + colors[i] + "\")' style='color: " + textColors[i] + ";'>" + colors[i] + "</button>";
    }

    html += "</div><div style='text-align:center;'>";
    html += "<button id='strobeButton' onclick='toggleStrobe()'>" + String(isStrobeOn ? "Stop Strobe" : "Strobe") + "</button>";
    html += "<button id='colorstrobe' onclick='toggleColorStrobe()'>" + String(isColorStrobe ? "Color Strobe OFF" : "Color Strobe") + "</button>";
    html += "<input type='number' id='bpmInput' placeholder='Enter BPM' style='text-align:center;' oninput='updateBPM()'>";
    html += "<button onclick='doubleBPM()'>2x BPM</button>";
    html += "<button onclick='halfBPM()'>1/2x BPM</button>";
    html += "<h3 style='text-align:center;'>Current BPM is: <span id='currentBPM'>" + String(bpm) + "</span></h3>";
    html += "</div><div style='text-align:center;'>";
    html += "<button id='otaButton' onclick='toggleOTA()'>" + String(isOTAEnabled ? "Disable OTA" : "Enable OTA") + "</button>";

    html += "</div><script>";
    html += "function sendIR(color){fetch('/ir?color='+encodeURIComponent(color));}";
    html += "var strobeInterval = " + String(60000 / bpm / 2) + ";";  // Set strobe interval to 1s (1000 milliseconds)
    //html += "  var  strobeInterval = 60000 / newBPM / 2;";
    html += "var intervalId;";  // Declare intervalId variable globally
                                // Function to toggle the strobing effect on the strobeButton
    html += "function toggleStrobe() {";
    html += "    var button = document.getElementById('strobeButton');";
    html += "    if (button.innerText === 'Stop Strobe') {";
    html += "        button.innerText = 'Strobe';";
    html += "        stopStrobe('strobeButton');";  // Stop the strobing effect
    html += "    } else {";
    html += "        button.innerText = 'Stop Strobe';";
    html += "        startStrobe('strobeButton');";  // Start the strobing effect
    html += "    }";
    html += "    fetch('/toggle-strobe').then(response=>response.text()).then(text=>{document.getElementById('strobeButton').innerText=text;});";
    html += "}";


    html += "function toggleColorStrobe() {";
    html += "    var button = document.getElementById('colorstrobe');";
    html += "    if (button.innerText === 'Color Strobe OFF') {";
    html += "        button.innerText = 'Color Strobe';";
    html += "        stopStrobe('colorstrobe');";  // Stop the strobing effect
    html += "    } else {";
    html += "        button.innerText = 'Color Strobe OFF';";
    html += "        startStrobe('colorstrobe');";  // Start the strobing effect
    html += "    }";
    html += "    fetch('/toggle-colorstrobe').then(response=>response.text()).then(text=>{document.getElementById('colorstrobe').innerText=text;});";
    html += "}";


    html += "function startStrobe(elementId) {";
    html += " strobeInterval = " + String(60000 / bpm / 2) + ";";
    html += "    intervalId = setInterval(function() {";
    html += "        document.getElementById(elementId).classList.toggle('strobing');";
    html += "    }, strobeInterval);";
    html += "}";
    html += "function stopStrobe(elementId) {";

    html += "    clearInterval(intervalId);";
    html += "    document.getElementById(elementId).classList.remove('strobing');";
    html += "}";

    html += "function toggleOTA(){fetch('/toggle-ota').then(response=>response.text()).then(text=>{document.getElementById('otaButton').innerText=text;});}";
    html += "function doubleBPM(){fetch('/double-bpm').then(response=>response.text()).then(text=>{updateCurrentBPM(text);});}";
    html += "function halfBPM(){fetch('/half-bpm').then(response=>response.text()).then(text=>{updateCurrentBPM(text);});}";
    html += "function updateCurrentBPM(newBPM){document.getElementById('currentBPM').innerText=newBPM;}";
    html += "function updateBPM(){var newBPM=document.getElementById('bpmInput').value; fetch('/set-bpm?bpm='+newBPM).then(response=>response.text()).then(text=>{document.getElementById('currentBPM').innerText=text;});}";
    //html += "function updateBPM(){var newBPM=parseFloat(document.getElementById('bpmInput').value); fetch('/set-bpm?bpm='+newBPM).then(response=>response.text()).then(text=>{document.getElementById('bpmInput').value=text;document.getElementById('currentBPM').innerText=text;});}";
    html += "</script><footer style='text-align:center;font-weight:bold;font-family:Bebas Neue;'>Developed by Sami Ibn Jamil</footer></body></html>";

    server.send(200, "text/html", html);
  }
}

void handleConnect() {
  ssid = server.arg("ssid").c_str();
  password = server.arg("password").c_str();
  Serial.print("new ssid ");
  Serial.println(ssid);
  Serial.print("new pass: ");
  Serial.println(password);
  // WiFi.softAPdisconnect(true); // Disconnect and stop the hotspot
  // Serial.println("Stopped WiFi hotspot");
  connectToWiFi();
}

void handleIR() {
  String color = server.arg("color");
  uint32_t irCode;
  if (color == "Red") {
    irCode = red;
  } else if (color == "Power") {
    irCode = toggle;
  } else if (color == "Blue") {
    irCode = blue;
  } else if (color == "Green") {
    irCode = green;
  } else if (color == "Yellow") {
    irCode = yellow;
  } else if (color == "Brightness +") {
    irCode = brightnessUp;
  } else if (color == "Brightness -") {
    irCode = brightnessDown;
  } else if (color == "Warm") {
    irCode = warm;
  } else if (color == "White") {
    irCode = white;
  }
  irsend.sendNEC(irCode);
  server.send(200, "text/plain", "IR signal sent for color: " + color);
}

void handleStrobe() {
  unsigned long currentTime = millis();
  if (currentTime - previousStrobeTime >= interval) {
    previousStrobeTime = currentTime;
    irsend.sendNEC(toggle);
    irsend.sendNEC(toggle);
    digitalWrite(LED_BUILTIN, ledState);
    ledState = !ledState;
    interval = 60000 / bpm;
    Serial.print("interval: ");
    Serial.println(interval);
  }
}

void handleColorStrobe() {
  unsigned long currentTime = millis();
  if (currentTime - previousStrobeTime >= interval) {
    previousStrobeTime = currentTime;
    int colorIndex = random(3);  // Index of colors array
    irsend.sendNEC(toggle);
    irsend.sendNEC(colors[colorIndex]);
    irsend.sendNEC(toggle);
    digitalWrite(LED_BUILTIN, ledState);
    ledState = !ledState;
    interval = 60000 / bpm;
    Serial.print("interval: ");
    Serial.println(interval);
  }
}

void handleToggleStrobe() {
  isStrobeOn = !isStrobeOn;
  if (isStrobeOn) {
    previousStrobeTime = millis();
    interval = 60000 / bpm / 2;
  }
  server.send(200, "text/plain", String(isStrobeOn ? "Stop Strobe" : "Strobe"));
}

void handleToggleColorStrobe() {
  isColorStrobe = !isColorStrobe;
  if (isColorStrobe) {
    previousStrobeTime = millis();
    interval = 60000 / bpm / 2;
  }
  server.send(200, "text/plain", String(isColorStrobe ? "Color Strobe OFF" : "Color Strobe"));
}

void handleToggleOTA() {
  isOTAEnabled = !isOTAEnabled;
  server.send(200, "text/plain", String(isOTAEnabled ? "Disable OTA" : "Enable OTA"));
}

void handleDoubleBPM() {
  bpm *= 2;
  interval = 60000 / bpm / 2;
  server.send(200, "text/plain", String(bpm));
}

void handleHalfBPM() {
  bpm /= 2;
  interval = 60000 / bpm / 2;
  server.send(200, "text/plain", String(bpm));
}

void handleSetBPM() {
  if (server.hasArg("bpm")) {
    bpm = server.arg("bpm").toInt();
    interval = 60000 / bpm / 2;
  }
  server.send(200, "text/plain", String(bpm));
}
