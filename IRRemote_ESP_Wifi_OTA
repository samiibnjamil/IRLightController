#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

// IR LED pin
#define IR_LED_PIN 2

// Define your WiFi credentials
const char* ssid = "Ssid";
const char* password = "pass";

// Create an instance of the web server
ESP8266WebServer server(80);

// Create an instance of the IR transmitter
IRsend irsend(IR_LED_PIN);

// Define IR signal codes
uint32_t red = 0x1FEE01F;
uint32_t toggle = 0x1FE48B7;
uint32_t blue = 0x1FE906F;
uint32_t green = 0x1FE10EF;
uint32_t yellow = 0x1FE50AF;
uint32_t brightnessUp = 0x1FE58A7;
uint32_t brightnessDown = 0x1FE7887;
uint32_t warm = 0x1FE20DF;
uint32_t white = 0x1FE609F;

// Variables for strobe function
bool isStrobeOn = false;
unsigned long previousStrobeTime = 0;
unsigned long interval = 0;
int bpm = 125;

// Flag for OTA updates
bool isOTAEnabled = true;

void setup() {
  // Initialize Serial port
  Serial.begin(115200);
  Serial.println("Serial initialized");

  // Initialize IR LED
  irsend.begin();
  Serial.println("IR LED initialized");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("...");
  }
  Serial.println("Connected to WiFi");

  // Print ESP8266 IP address
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Start OTA (Over-The-Air) update service
  if (isOTAEnabled) {
    ArduinoOTA.begin();
    Serial.println("OTA initialized");
  } else {
    Serial.println("OTA disabled");
  }

  // Start the web server
  server.on("/", handleRoot);
  server.on("/ir", handleIR);
  server.on("/strobe", handleStrobe);
  server.on("/toggle-ota", handleToggleOTA);
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  // Handle OTA update service if enabled
  if (isOTAEnabled) {
    ArduinoOTA.handle();
  }

  // Handle web server requests
  server.handleClient();

  // Handle strobe function if it's on
  if (isStrobeOn) {
    strobe(bpm);
  }
}
void handleRoot() {
  // HTML content to be served
  String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'><title>Light Controller</title>";

  // Add dark theme CSS
  html += "<style>";
  html += "body { background-color: #222; color: #fff; font-family: Arial, sans-serif; padding: 20px; }";
  html += "button { background-color: #444; color: #fff; border: none; padding: 10px 20px; margin: 5px; cursor: pointer; }";
  html += "input[type='number'] { padding: 10px; margin: 5px; border-radius: 5px; box-sizing: border-box; }";
  html += "@media only screen and (max-width: 600px) {";
  html += "  button { width: 100%; }";
  html += "  input { width: 100%; }";
  html += "}";
  html += "</style>";

  html += "</head><body>";

  // Add buttons for each color
  String colors[] = {"Red", "Toggle", "Blue", "Green", "Yellow", "Brightness +", "Brightness -", "Warm", "White"};
  for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++) {
    html += "<button onclick='sendIR(\"" + colors[i] + "\")'>" + colors[i] + "</button>";
  }

  // Add input field for BPM

html += "<input type='number' id='bpmInput' placeholder='Enter BPM' style='text-align: center;'>";



  // Add strobe button
  html += "<button onclick='toggleStrobe()'>Strobe</button>";

  // Add OTA toggle button
  html += "<button id='otaButton' onclick='toggleOTA()'>" + String(isOTAEnabled ? "Disable OTA" : "Enable OTA") + "</button>";

  // // Script to handle button clicks
  // html += "<script>function sendIR(color) { fetch('/ir?color=' + color); } ";
  // html += "function toggleStrobe() { var bpm = document.getElementById('bpmInput').value; fetch('/strobe?bpm=' + bpm); }";
  // html += "function toggleOTA() { fetch('/toggle-ota').then(response => response.text()).then(text => { document.getElementById('otaButton').innerText = text; }); }";
  // html += "</script>";

  // Script to handle button clicks
html += "<script>function sendIR(color) { fetch('/ir?color=' + encodeURIComponent(color)); } ";
html += "function toggleStrobe() { var bpm = document.getElementById('bpmInput').value; fetch('/strobe?bpm=' + bpm); }";
html += "function toggleOTA() { fetch('/toggle-ota').then(response => response.text()).then(text => { document.getElementById('otaButton').innerText = text; }); }";
html += "</script>";

  html += "</body></html>";

  // Send the HTML page
  server.send(200, "text/html", html);
}



void handleIR() {
  // Get the color from the request
  String color = server.arg("color");
   
  
  // Print the received color to Serial Monitor for debugging
  Serial.println("Received color: " + color);
  // Define IR signal codes based on the color
  uint32_t irCode;
  if (color == "Red") {
    irCode = red;
  } else if (color == "Toggle") {
    irCode = toggle;
  } else if (color == "Blue") {
    irCode = blue;
  } else if (color == "Green") {
    irCode = green;
  } else if (color == "Yellow") {
    irCode = yellow;
  } else if (color == "Brightness +") {
    irCode = brightnessUp;
  } else if (color == "Brightness -") {
    irCode = brightnessDown;
  } else if (color == "Warm") {
    irCode = warm;
  } else if (color == "White") {
    irCode = white;
  }
  // Send IR signal
  irsend.sendNEC(irCode);
  Serial.print(irCode);
  Serial.println(" Sent IR signal for color: " + color);
  
  // Send HTTP response
  server.send(200, "text/plain", "IR signal sent for color: " + color);
}

void strobe(int _bpm) {
  unsigned long currentTime = millis();
  if (currentTime - previousStrobeTime >= interval) {
    previousStrobeTime = currentTime;
    // Toggle the LED state
    irsend.sendNEC(toggle);
    Serial.println("Sent strobe IR signal");
    // Calculate the time interval based on the current BPM
    interval = 60000 / _bpm / 2; // Half of the interval time to Toggle
  }
}

void handleStrobe() {
  // Toggle strobe function on/off
  isStrobeOn = !isStrobeOn;
  Serial.println("Strobe " + String(isStrobeOn ? "ON" : "OFF"));
  
  // Set BPM if provided in the request
  if (server.hasArg("bpm")) {
    bpm = server.arg("bpm").toInt();
    Serial.println("BPM set to " + String(bpm));
  }
  
  if (isStrobeOn) {
    // Initialize strobe function
    previousStrobeTime = millis();
    interval = 60000 / bpm / 2;
  }
  // Send HTTP response
  server.send(200, "text/plain", "Strobe " + String(isStrobeOn ? "ON" : "OFF"));
}

void handleToggleOTA() {
  // Toggle OTA updates on/off
  isOTAEnabled = !isOTAEnabled;
  Serial.println("OTA " + String(isOTAEnabled ? "enabled" : "disabled"));
  
  // Send HTTP response with appropriate text
  server.send(200, "text/plain", String(isOTAEnabled ? "Disable OTA" : "Enable OTA"));
}
