#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

// IR LED pin
#define IR_LED_PIN 2

// Define your WiFi credentials
const char* ssid = "ssid";
const char* password = "pass";

// Create an instance of the web server
ESP8266WebServer server(80);

// Create an instance of the IR transmitter
IRsend irsend(IR_LED_PIN);

// Define IR signal codes
uint32_t red = 0x1FEE01F;
uint32_t toggle = 0x1FE48B7;
uint32_t blue = 0x1FE906F;
uint32_t green = 0x1FE10EF;
uint32_t yellow = 0x1FE50AF;
uint32_t bUp = 0x1FE58A7;
uint32_t bDown = 0x1FE7887;
uint32_t warm = 0x1FE20DF;
uint32_t white = 0x1FE609F;

// Variables for strobe function
bool isStrobeOn = false;
unsigned long previousStrobeTime = 0;
unsigned long interval = 0;
int bpm = 125;

// Flag for OTA updates
bool isOTAEnabled = false;

void setup() {
  // Initialize Serial port
  Serial.begin(115200);
  Serial.println("Serial initialized");

  // Initialize IR LED
  irsend.begin();
  Serial.println("IR LED initialized");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("...");
  }
  Serial.println("Connected to WiFi");

  // Print ESP8266 IP address
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Start OTA (Over-The-Air) update service
  if (isOTAEnabled) {
    ArduinoOTA.begin();
    Serial.println("OTA initialized");
  } else {
    Serial.println("OTA disabled");
  }

  // Start the web server
  server.on("/", handleRoot);
  server.on("/ir", handleIR);
  server.on("/strobe", handleStrobe);
  server.on("/toggle-ota", handleToggleOTA);
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  // Handle OTA update service if enabled
  if (isOTAEnabled) {
    ArduinoOTA.handle();
  }

  // Handle web server requests
  server.handleClient();

  // Handle strobe function if it's on
  if (isStrobeOn) {
    strobe(bpm);
  }
}

void handleRoot() {
  // HTML content to be served
  String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'><title>ESP8266 Controller</title></head><body>";
  
  // Add buttons for each color
  String colors[] = {"red", "toggle", "blue", "green", "yellow", "bUp", "bDown", "warm", "white"};
  for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++) {
    html += "<button style='background-color:#" + String(colors[i]) + "' onclick='sendIR(\"" + String(colors[i]) + "\")'>" + colors[i] + "</button>";
  }
  
  // Add input field for BPM
  html += "<input type='number' id='bpmInput' placeholder='Enter BPM'>";
  
  // Add strobe button
  html += "<button onclick='toggleStrobe()'>Strobe</button>";

  // Add OTA toggle button
  html += "<button id='otaButton' onclick='toggleOTA()'>" + String(isOTAEnabled ? "Disable OTA" : "Enable OTA") + "</button>";
  
  // Script to handle button clicks
  html += "<script>function sendIR(color) {fetch('/ir?color=' + color);} ";
  html += "function toggleStrobe() {";
  html += "var bpm = document.getElementById('bpmInput').value;";
  html += "fetch('/strobe?bpm=' + bpm);}";
  html += "function toggleOTA() {fetch('/toggle-ota').then(response => response.text()).then(text => {document.getElementById('otaButton').innerText = text;});}</script></body></html>";
  
  // Send the HTML page
  server.send(200, "text/html", html);
}

void handleIR() {
  // Get the color from the request
  String color = server.arg("color");
  
  // Define IR signal codes based on the color
  uint32_t ir_code;
  if (color == "red") {
    ir_code = red;
  } else if (color == "toggle") {
    ir_code = toggle;
  } else if (color == "blue") {
    ir_code = blue;
  } else if (color == "green") {
    ir_code = green;
  } else if (color == "yellow") {
    ir_code = yellow;
  } else if (color == "bUp") {
    ir_code = bUp;
  } else if (color == "bDown") {
    ir_code = bDown;
  } else if (color == "warm") {
    ir_code = warm;
  } else if (color == "white") {
    ir_code = white;
  }
  
  // Send IR signal
  irsend.sendNEC(ir_code);
  Serial.println("Sent IR signal for color: " + color);
  
  // Send HTTP response
  server.send(200, "text/plain", "IR signal sent for color: " + color);
}

void strobe(int _bpm) {
  unsigned long currentTime = millis();
  if (currentTime - previousStrobeTime >= interval) {
    previousStrobeTime = currentTime;
    // Toggle the LED state
    irsend.sendNEC(toggle);
    Serial.println("Sent strobe IR signal");
    // Calculate the time interval based on the current BPM
    interval = 60000 / _bpm / 2; // Half of the interval time to toggle
  }
}

void handleStrobe() {
  // Toggle strobe function on/off
  isStrobeOn = !isStrobeOn;
  Serial.println("Strobe " + String(isStrobeOn ? "ON" : "OFF"));
  
  // Set BPM if provided in the request
  if (server.hasArg("bpm")) {
    bpm = server.arg("bpm").toInt();
    Serial.println("BPM set to " + String(bpm));
  }
  
  if (isStrobeOn) {
    // Initialize strobe function
    previousStrobeTime = millis();
    interval = 60000 / bpm / 2;
  }
  // Send HTTP response
  server.send(200, "text/plain", "Strobe " + String(isStrobeOn ? "ON" : "OFF"));
}

void handleToggleOTA() {
  // Toggle OTA updates on/off
  isOTAEnabled = !isOTAEnabled;
  Serial.println("OTA " + String(isOTAEnabled ? "enabled" : "disabled"));
  
  // Send HTTP response with appropriate text
  server.send(200, "text/plain", String(isOTAEnabled ? "Disable OTA" : "Enable OTA"));
}
